36일차 강의

능력단위: 데이터 입출력 구현

시연

피드백



objectAid
https://www.objectaid.com/

install ObjectAid 보고 따라해도됨


강인씨 로또 프로젝트 이클립스 자바사용하는 걸로 가져와서
src 폴더에서
-new-other-objectAid Class Diagram을 선택해서
이름적어주고(lottoProject)
- add Dependincies 에 체크해주면


lottoProject.ucls 생긴게 보인다
원하는 .java을 드래그해서 가져오면 모델링된 모습을 볼수있다
[클래스 다이어그램]


--------------------------------------
temp에 
workspace
workspaceWeb 백업 만들어둠

운영체제에대해 알필요가 있음
최소 - 정보처리기사에서 운영체제과목을 공부하며 도움이된다
프로그램의 실행에도 순서가 있다  


------------------------------------------------------------


제어자(modifier)


자바프로젝트명 ModifierStudy
new- package 
패키지명 staitcs - new - class
클래스명 StaticTest
(패키지는 다 소문자로 적는다)


------------------------------------------------------------

이상해져서 이클립스를 다시 설치해야한다면?
metadata 까지 무조건 다 지워야한다
인코딩 UTF-8로 바꿔주고

------------------------------------------------------------

main을 만들어서
StaticTest 클래스가 시행되도록해라

StaticMain.java 로 만들어서 

출력결과
10
20
이라는 값을 넣으면

20이 출력되도록 하면된다


--------------------------------------------------------

제어자(modifier)

제어자란 클래스, 변수 또는 메서드의 선언부에 함께 
사용되어 부가적인 의미를 부여한다.
제어자의 종류는 크게 접근 제어자와 그외의 제어자로
나눌 수 있다.



접근 제어자
public, protected, default, private

그외
static, final, abstract, native, transient, synchronized, volatile, strictfp

static - 정적의, 클래스의, 공통적인

인스턴스변수는 하나의 클래스로부터 생성되었더라도
각기 다른 값을 유지하지만, 클래스변수는 인스턴스에 관계없이 같은 값을 갖는다.
그 이유는 하나의 변수를 모든 인스턴스가 공유하기 때문이다.
인스턴스메서드와 static메서드의 근본적인 차이는
메서드 내에서 인스턴스 멤버를 사용하는가의 여부에 있다

@ 이게 원래의 용도 !!!이걸 파악해야!!!!
메서드 내에서 인스턴스 멤버를 사용하는가의 여부에 있다

제어자는 클래스나 멤버변수와 메서드에 주로 사용되며,
하나의 대상에 대하여 여러 제어자를 조합하여 사용하는 것이 가능
단, 접근 제  어자는 한 번에 네 가지 중 하나만 선택해서 사용할수 있다








-----------------------------------------------------------------
static이 사용될 수 있는 곳 - 멤버변수, 메서드
static을 
멤버변수에 붙이면>>
- 모든 인스턴스에 공통적으로 사용되는 클래스변수가 된다
- 클래스변수는 인스턴스를 생성하지 않고도 사용가능하다
- 클래스가 메모리에 로드될 때 생성된다
(이미 서버에 올라갈때 생성된것, static 은 전역이다)
(생성주기를 잘모르면 혼란스러워진다)

메서드에 붙이면>>
- 인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다.
- static메서드 내에서는 인스턴스멤버들을 직접 사용할 수 없다.
--------------------------------------------------------------

final - 마지막의, 변경될 수 없는
거의 모든 대상에 사용가능하다
변수에 사용되면 값을 변경할 수 없는 상수가 되며,
메서드에 사용되면 오버라이딩을 할 수 없게 되고
클래스에 사용되면 자신을 확장하는 자손클래스를 정의하지 못하게된다(그자체로 사용하라는것, 상속하지 못함)

사용가능한 곳 - 클래스, 메서드, 멤버변수, 지역변수

클래스 - final로 지정된 클래스는 다른 클래스의 조상이 될 수 없다(확장 될수 없는 클래스)
메서드 - 변경될 수 없는 메서드
	즉, 오버라이딩을 통해 재정의 될 수 없다
멤버변수, 지역변수 - 값을 변경할 수 없는 상수가 됨

--------------------------------------------------------------

abstract - 추상의, 미완성의
(미완성이기 때문에 물건을 만들수 없다)

-------------------------------------------------------------
public
(이걸모르면 보안이란 없다)

접근 제어자
private
default
protected
public

멤버 또는 클래스에 사용되어,
해당하는 멤버 또는 클래스를 외부에서 접근하지 못하도록 제한하는 역할을 한다.
접근 제어자가 없으면 기본적으로 default이다
클래스나 멤버변수, 메서드, 생성자에 접근 제어자가 지정되어 있지 않다면 default 임을 뜻한다.
단, default를 적으면 오류다


파일명: PublicMain
The method numPrint() from the type DefaultTest is not visible

----------------------------------------------------------------
- transient : lasting only a short time (syn: temporary)
- volatile : evaporating rapidly (syn: unstable)
- static : pertaining to or characterized by a fixed or stationary condition. showing little or no change:



------------------------------------------------------------------

패키지명 finals

파일명 FinalMain

오류 The final field FinalTest.MAX_SIZE cannot be assigned


final은 static과 함께 쓰인다
설계의 영역이다
전역에 걸쳐 사용가능한 절대 바꿀수없다는 의미이므로

-------------------------------------------------------------

!!!!!!!!!!!  중요 단축키
f3: 선언된 위치로 찾아간다(선언문으로)

ctrl + shift + o : 자동 import


패키지끼리는 밀접한 관련이 있다
클래스 자체를 막아버리고 싶으면 클래스명 앞에 public을 지워버리고

import를 썻다는건 시작되었다는거다 뭐가?????



안붙이면 기본이 default이므로 왜만하면 public을 일반적으로 클래스 앞에 붙여준다


---------------------------------------------------------

this() - 같은 클래스내의 다른 생성자 호출
super() - 조상 클래스의 생성자(도 호출이 가능하다)



모든 클래스의 최고의 조상: Object (묵시적으로 선언되어있었음)
이 없으면 클래스란 존재하지 않는다



new해서 객체를 생성해서 사용시
모든것은 object에서부터 수행이된다
그리고 부모가 있으면 부모가 수행되고
그다음 나 자신이 수행된다



(실습)
 p332

메인메서드는 
points 패키지에 만든다

나머지 클래스는
points.figure 패키지에 모두 만드시오

그리고 오류를 해결하시오

-----------------------------

디버깅 f11 - f6

추적포인트를 찍어야 찾아간다

디버깅이 끝나면 x 를 눌러 삭제해줘야한다


exam.test

---------------------------------------------------


this. 하면 자기자신을 찾는건데
자기자신에 없으면 
부모님한테 가서 찾고
거기도없으면 못쓰는 것이다.

--------------------------------------------

super는 한번만 부른다!!

---------------------------------------------

!!!!!!!!!!!!!위험해!!!!!!!!!!

디버깅중에 코드를 바꾸면 큰일난다!!!!
무조건 terminate 하고 디버깅을 끝낸후
코드를 변경하고
다시 디버깅을 수행하라
